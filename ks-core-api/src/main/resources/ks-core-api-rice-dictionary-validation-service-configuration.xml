<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <import resource="classpath:ks-core-api-rice-data-dictionary-service-configuration.xml"/>
    <bean id="riceDictionaryValidationService" class="org.kuali.rice.krad.service.impl.DictionaryValidationServiceImpl">
        <property name="dataDictionaryService" ref="riceDataDictionaryService"/>
        <!--
        Collection constraint processors are classes that determine if a
        feature of a collection of objects satisfies some constraint
        -->
        <property name="collectionConstraintProcessors">
            <list>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.CollectionSizeConstraintProcessor"/>
            </list>
        </property>
    <!-- Element constraint processors are classes that determine if a passed value is valid for a specific constraint at the individual object or object attribute level
     The order matters here because case adds additional constraints to the queue for other processors to pick up-->
        <property name="elementConstraintProcessors">
            <list>
        <bean class="org.kuali.rice.krad.datadictionary.validation.processor.CaseConstraintProcessor"
              parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.ExistenceConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.DataTypeConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.RangeConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.LengthConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.ValidCharactersConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.PrerequisiteConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.processor.MustOccurConstraintProcessor"
                      parent="mandatoryElementConstraintProcessor"/>
            </list>
        </property>
        <!-- Constraint providers are classes that map specific constraint types to a constraint resolver, which takes a constrainable definition -->
        <property name="constraintProviders">
            <list>
                <bean class="org.kuali.rice.krad.datadictionary.validation.constraint.provider.AttributeDefinitionConstraintProvider">
                    <!--
                        individual constraint resolvers can be injected as a map keyed by constraint type as string, or the default
                        resolvers can be instantiated into the map by adding 'init-method="init"' to the bean declaration above
                    -->
                    <property name="resolverMap">
                        <map>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.CaseConstraint"
                                   value-ref="dictionaryValidationCaseConstraintResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.ExistenceConstraint"
                                   value-ref="dictionaryValidationDefinitionConstraintResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.DataTypeConstraint"
                                   value-ref="dictionaryValidationDefinitionConstraintResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.LengthConstraint"
                                   value-ref="dictionaryValidationDefinitionConstraintResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.ValidCharactersConstraint"
                                   value-ref="dictionaryValidationValidCharactersConstraintResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.PrerequisiteConstraint"
                                   value-ref="dictionaryValidationPrerequisiteConstraintsResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint"
                                   value-ref="dictionaryValidationMustOccurConstraintsResolver"/>
                            <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.CollectionSizeConstraint"
                                   value-ref="dictionaryValidationDefinitionConstraintResolver"/>
                        </map>
                    </property>
                </bean>
        <bean class="org.kuali.rice.krad.datadictionary.validation.constraint.provider.ComplexAttributeDefinitionConstraintProvider"/>
                <bean class="org.kuali.rice.krad.datadictionary.validation.constraint.provider.DataObjectEntryConstraintProvider">
                    <!--
                        individual constraint resolvers can be injected as a map keyed by constraint type as string, or the default
                        resolvers can be instantiated into the map by adding 'init-method="init"' to the bean declaration above
                    -->
                    <property name="resolverMap">
                        <map>
              <entry key="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
                <ref bean="dictionaryValidationMustOccurConstraintsResolver"/>
              </entry>
                        </map>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="dictionaryValidationDefinitionConstraintResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.DefinitionConstraintResolver"/>

    <bean id="dictionaryValidationCaseConstraintResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.CaseConstraintResolver"/>

    <bean id="dictionaryValidationSimpleConstraintResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.SimpleConstraintResolver"/>

    <bean id="dictionaryValidationValidCharactersConstraintResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.ValidCharactersConstraintResolver"/>

    <bean id="dictionaryValidationPrerequisiteConstraintsResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.PrerequisiteConstraintsResolver"/>

    <bean id="dictionaryValidationMustOccurConstraintsResolver"
          class="org.kuali.rice.krad.datadictionary.validation.constraint.resolver.MustOccurConstraintsResolver"/>

    <bean id="mandatoryElementConstraintProcessor"
          class="org.kuali.rice.krad.datadictionary.validation.processor.MandatoryElementConstraintProcessor"
          abstract="true">
        <property name="dataDictionaryService" ref="riceDataDictionaryService"/>
        <property name="dateTimeService" ref="dateTimeService"/>
    </bean>

    <bean id="dateTimeService" class="org.kuali.student.r2.common.datadictionary.SpringConfigurableDateTimeServiceImpl">
        <property name="stringToDateFormats">
            <list>
                <value>MM/dd/yyyy hh:mm a</value>
                <value>MM/dd/yy;MM/dd/yyyy</value>
                <value>MM-dd-yy</value>
                <value>MMddyy</value>
                <value>MMMM dd;yyyy</value>
                <value>MM/dd/yy HH:mm:ss</value>
                <value>MM/dd/yyyy HH:mm:ss;MM-dd-yy HH:mm:ss</value>
                <value>MMddyy HH:mm:ss</value>
                <value>MMMM dd HH:mm:ss</value>
                <value>yyyy HH:mm:ss</value>
            </list>
        </property>
        <property name="stringToTimestampFormats">
            <list>
                <value>MM/dd/yyyy hh:mm a</value>
                <value>MM/dd/yy</value>
                <value>MM/dd/yyyy</value>
                <value>MM-dd-yy</value>
                <value>MMddyy</value>
                <value>MMMM dd</value>
                <value>yyyy</value>
                <value>MM/dd/yy HH:mm:ss</value>
                <value>MM/dd/yyyy HH:mm:ss</value>
                <value>MM-dd-yy HH:mm:ss</value>
                <value>MMddyy HH:mm:ss</value>
                <value>MMMM dd HH:mm:ss</value>
                <value>yyyy HH:mm:ss</value>
            </list>
        </property>
        <property name="dateToStringFormatForUserInterface" value="MM/dd/yyyy" />
        <property name="timestampToStringFormatForUserInterface" value="MM/dd/yyyy hh:mm a" />
        <property name="dateToStringFormatForFileName" value="yyyyMMdd" />
        <property name="timestampToStringFormatForFileName" value="yyyyMMdd-HH-mm-ss-S" />
    </bean>
</beans>
