<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:amq="http://activemq.apache.org/schema/core"
        xmlns:jms="http://www.springframework.org/schema/jms"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
  http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-2.5.xsd">

    <!-- NOTE: these declarations must be maintained in ALPHABETICAL-order or they will break the build
         http://stackoverflow.com/a/2785026
    -->
    <amq:broker useJmx="false" persistent="false">
        <amq:plugins>
            <amq:statisticsBrokerPlugin />
        </amq:plugins>
        <amq:transportConnectors>
            <amq:transportConnector uri="tcp://localhost:0" />
        </amq:transportConnectors>
    </amq:broker>

    <!-- Basic AMQ connection factory -->
    <amq:connectionFactory id="amqConnectionFactory" brokerURL="vm://localhost" />

    <!-- Wraps the AMQ connection factory in Spring's caching (ie: pooled) factory
         From the AMQ "Spring Support"-page: "You can use the PooledConnectionFactory for efficient pooling... or you
         can use the Spring JMS CachingConnectionFactory to achieve the same effect."
         See "Consuming JMS from inside Spring" at http://activemq.apache.org/spring-support.html
         Also see http://codedependents.com/2010/07/14/connectionfactories-and-caching-with-spring-and-activemq/

         Note: there are pros/cons to using Spring's caching factory vs Apache's PooledConnectionFactory; but, until
         we have more explicit reasons to favor one over the other, Spring's is less tightly-coupled to a specific
         AMQP-implementation.
         See http://stackoverflow.com/a/19594974
    -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <constructor-arg ref="amqConnectionFactory"/>
        <property name="sessionCacheSize" value="1"/>
    </bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <constructor-arg ref="connectionFactory" />
    </bean>

    <jms:listener-container concurrency="1" >
        <!-- This is used for performance monitoring of queues -->
        <jms:listener id="regPerfListener" destination="org.kuali.student.enrollment.registration.performanceStatsQueue" ref="performanceStatsListener" />
        <!-- These listeners are the nodes in the registration engine -->
        <jms:listener id="regInitListener" destination="org.kuali.student.enrollment.registration.initilizationListenerQueue" ref="registrationInitilizationListener" />
        <jms:listener id="regVerificationListener" destination="org.kuali.student.enrollment.registration.verificationQueue" ref="registrationVerificationListener" />
        <jms:listener id="regSplitByItemListener" destination="org.kuali.student.enrollment.registration.splitByItemQueue" ref="registrationSplitByItemListener" />
        <jms:listener id="regLprActionListener" destination="org.kuali.student.enrollment.registration.lprActionQueue" ref="registrationLprActionListener" />
    </jms:listener-container>

    <!--Used to collect performance statistics -->
    <bean id="performanceStatsListener" class="org.kuali.student.enrollment.registration.engine.listener.SimplePerformanceListener">
        <property name="jmsTemplate" ref="jmsTemplate"/>
    </bean>

    <!-- Starts the registration process for adds/drops/updates/swaps/etc. -->
    <bean id="registrationInitilizationListener" class="org.kuali.student.enrollment.registration.engine.node.impl.CourseRegistrationInitializationNode">
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="courseRegistrationEngineService" ref="courseRegistrationEngineService"/>
        <property name="destinations">
            <list>
                <value>org.kuali.student.enrollment.registration.verificationQueue</value>
            </list>
        </property>
        <property name="filters">
            <list>
                <bean class="org.kuali.student.enrollment.registration.engine.node.filter.PerformanceStartNodeFilter"/>
            </list>
        </property>
    </bean>

    <!-- Verifies the reg request -->
    <bean id="registrationVerificationListener" class="org.kuali.student.enrollment.registration.engine.node.impl.CourseRegistrationVerifyRegRequestNode">
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="destinations">
            <list>
                <value>org.kuali.student.enrollment.registration.splitByItemQueue</value>
            </list>
        </property>
    </bean>

    <!-- splits the reg request into multiple queues, one for each item, with a group id of the item's FO -->
    <bean id="registrationSplitByItemListener" class="org.kuali.student.enrollment.registration.engine.node.impl.CourseRegistrationSplitRequestItemsNode">
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="destinations">
            <list>
                <value>org.kuali.student.enrollment.registration.lprActionQueue</value>
            </list>
        </property>
    </bean>

    <!-- performs the update/drop/(waitlist check + seat check + add) -->
    <bean id="registrationLprActionListener" class="org.kuali.student.enrollment.registration.engine.node.impl.CourseRegistrationLprActionNode">
        <property name="jmsTemplate" ref="jmsTemplate"/>
        <property name="courseRegistrationEngineService" ref="courseRegistrationEngineService"/>
        <property name="filters">
            <list>
                <bean class="org.kuali.student.enrollment.registration.engine.node.filter.PerformanceEndNodeFilter"/>
            </list>
        </property>
    </bean>

    <!-- Groups common registration functions into a single service -->
    <bean id="courseRegistrationEngineService" class="org.kuali.student.enrollment.registration.engine.service.impl.CourseRegistrationEngineServiceImpl"/>

    <bean id="userMessenger" class="org.kuali.student.r2.common.messenger.impl.JMSMessengerImpl">
        <property name="jmsTemplate" ref="jmsTemplate"/>
    </bean>

</beans>
